#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
trap 'echo "‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ $LINENO. –õ–æ–≥: $LOG"' ERR

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ESNSEY ================
TF_VERSION="1.9.5"
KIND_VERSION="v0.20.0"
PYTHON_VERSION="3.11.9"
ASDF_VERSION="v0.14.0"
EZA_VERSION="0.17.0"
LOG="$HOME/wsl-setup-$(date +%Y%m%d_%H%M%S).log"

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ======================
clear
echo -e "\e[1;36m"
cat << "BANNER"
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ        üöÄ –ó–∞–ø—É—Å–∫ ESNsey DevOps Environment Installer       ‚îÇ
‚îÇ     –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã WSL2   ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
BANNER
echo -e "\e[0m"

echo "‚ñ∂Ô∏è  –°—Ç–∞—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $(date)"
echo "üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥: $LOG"
exec > >(tee -a "$LOG") 2>&1

if [ "$(id -u)" -eq 0 ]; then
  echo "‚ùå –û—à–∏–±–∫–∞: –°–∫—Ä–∏–ø—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –æ—Ç root!" >&2
  exit 1
fi

# === –§–£–ù–ö–¶–ò–ò ===========================
install_with_retry() {
  local cmd=$1
  local name=$2
  local max_attempts=3
  
  for attempt in $(seq 1 $max_attempts); do
    echo "–ü–æ–ø—ã—Ç–∫–∞ $attempt: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ $name..."
    if $cmd; then
      echo "‚úÖ $name —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
      return 0
    else
      echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ $name, –ø–æ–ø—ã—Ç–∫–∞ $attempt –∏–∑ $max_attempts"
      sleep $((attempt * 2))
    fi
  done
  
  echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å $name"
  return 1
}

# === 1. –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ =============
echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
sudo apt update && sudo apt full-upgrade -y
sudo apt install -y git curl wget unzip zsh build-essential \
  python3-pip python3-venv docker.io docker-compose jq \
  fzf ripgrep bat direnv gnupg2 ca-certificates pv

# === 2. –£–°–¢–ê–ù–û–í–ö–ê EZA ==================
install_eza() {
  ARCH=$(uname -m)
  case "$ARCH" in
    x86_64) ARCH="x86_64";;
    aarch64) ARCH="aarch64";;
    *) echo "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH" >&2; return 1;;
  esac

  TMP=$(mktemp -d)
  URL="https://github.com/eza-community/eza/releases/download/v${EZA_VERSION}/eza_${EZA_VERSION}-${ARCH}-unknown-linux-gnu.tar.gz"
  
  curl -fsSL -o "$TMP/eza.tar.gz" "$URL"
  tar -xzf "$TMP/eza.tar.gz" -C "$TMP"
  sudo mv "$TMP/eza" /usr/local/bin/
  sudo chmod +x /usr/local/bin/eza
  rm -rf "$TMP"
}
install_with_retry install_eza "eza"

# === 3. ASDF –ò –Ø–ó–´–ö–ò ===================
echo "üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ASDF –∏ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è..."
if [ ! -d "$HOME/.asdf" ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch "$ASDF_VERSION" --depth=1
fi

. $HOME/.asdf/asdf.sh

declare -A plugins=(
  ["python"]="https://github.com/asdf-vm/asdf-python.git"
  ["nodejs"]="https://github.com/asdf-vm/asdf-nodejs.git"
  ["terraform"]="https://github.com/asdf-community/asdf-hashicorp.git"
)

for tool in "${!plugins[@]}"; do
  asdf plugin-add "$tool" "${plugins[$tool]}" || true
  asdf install "$tool" "$(asdf list-all "$tool" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -1)"
  asdf global "$tool" "$(asdf list "$tool" | tr -d ' *')"
done

# === 4. DOCKER –ò KUBERNETES –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ =
echo "üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –∏ Kubernetes..."
sudo groupadd docker 2>/dev/null || true
sudo usermod -aG docker "$USER"
sudo systemctl enable --now docker

install_with_retry \
  "curl -Lo ./kind https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-linux-$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/') && chmod +x ./kind && sudo mv ./kind /usr/local/bin/" \
  "kind"

# === 5. PYTHON –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ =============
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤..."
python3 -m pip install --user pipx
python3 -m pipx ensurepath
export PATH="$HOME/.local/bin:$PATH"

declare -A python_tools=(
  ["poetry"]="poetry"
  ["pre-commit"]="pre-commit"
  ["awscli"]="awscli"
  ["ansible"]="ansible"
)

for tool in "${!python_tools[@]}"; do
  pipx install "${python_tools[$tool]}" || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å $tool"
done

# === 6. VS CODE ========================
echo "üñ•Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ VS Code..."
if ! command -v code &>/dev/null; then
  wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
  sudo install -o root -g root -m644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
  echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" | sudo tee /etc/apt/sources.list.d/vscode.list
  sudo apt update
  sudo apt install -y code
  rm packages.microsoft.gpg
fi

# === 7. –ù–ê–°–¢–†–û–ô–ö–ê ZSH ==================
echo "‚ú® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ZSH –∏ Oh My Zsh..."
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k

# === 8. VPNGATE –°–ö–†–ò–ü–¢ =================
echo "üîí –£—Å—Ç–∞–Ω–æ–≤–∫–∞ VPNGate —Å–∫—Ä–∏–ø—Ç–∞..."
mkdir -p ~/scripts

cat << 'PYTHON' > ~/scripts/connect_vpngate.py
import requests
import os
from time import sleep

URL = "https://www.vpngate.net/api/iphone/"
LOG = os.path.expanduser("~/vpngate_log.txt")

def log(msg):
    with open(LOG, "a") as f:
        f.write(f"[VPNGate] {msg}\n")

def fetch_configs():
    try:
        log("üõ∞Ô∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ —Å vpngate.net...")
        resp = requests.get(URL, timeout=10)
        resp.raise_for_status()
        log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
        with open(os.path.expanduser("~/vpngate_list.csv"), "w") as f:
            f.write(resp.text)
        log("üìÑ –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    except requests.exceptions.RequestException as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    log("üöÄ –ó–∞–ø—É—Å–∫ connect_vpngate.py")
    fetch_configs()
PYTHON

chmod +x ~/scripts/connect_vpngate.py

# === 9. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–†–ï–î–´ =============
echo "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ESNsey..."
cat << 'ZSHRC' >> ~/.zshrc
# ========== ESNSEY CONFIG =============
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"

# ------ –ê–ª–∏–∞—Å—ã ESNsey ------
alias ll='eza -lah --color=auto'
alias gs='git status'
alias gcm='git commit -m'
alias dcu='docker compose up -d'
alias dcd='docker compose down'
alias tfplan='terraform plan -out=tfplan'
alias tfapply='terraform apply tfplan'
alias k='kubectl'
alias vpngate='python3 ~/scripts/connect_vpngate.py'
alias env-audit='~/devops-audit.sh'
update-system() {
  sudo apt update
  sudo apt full-upgrade -y
  sudo apt autormove -y
}

# ------ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ESNsey ------
clear
echo -e "\e[1;36m"
cat << "BANNER"
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ        üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DevOps WSL-—Å—Ä–µ–¥—É –æ—Ç ESNsey    ‚îÇ
‚îÇ  üîß –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è. üß† –£–º–Ω—ã–µ –∞–ª–∏–∞—Å—ã. ‚öôÔ∏è –ò–Ω—Ñ—Ä–∞ –∫–∞–∫ –∫–æ–¥.      ‚îÇ
‚îÇ       üåê ZSH ‚Ä¢ Python ‚Ä¢ Docker ‚Ä¢ K8s ‚Ä¢ Git ‚Ä¢ Cloud         ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
BANNER
echo -e "\e[0m"

echo "üì¶ Zsh: $(zsh --version | awk '{print $2}')"
echo "üêç Python: $(python3 --version | awk '{print $2}')"
echo "üü¢ Node.js: $(node -v 2>/dev/null || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
echo "üìÖ –î–∞—Ç–∞: $(date '+%Y-%m-%d %H:%M:%S')"
echo -e "\nüé® –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä ESNsey –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª —Å –º—É–¥—Ä–æ—Å—Ç—å—é.\n"

# ------ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ------
[ -f "$HOME/.p10k.zsh" ] && source "$HOME/.p10k.zsh"
source $ZSH/oh-my-zsh.sh

# ------ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ------
new-project() {
  [ -z "$1" ] && { echo "Usage: new-project <name>" >&2; return 1; }
  
  local project_root="$HOME/projects"
  [ -d "/mnt/e/projects" ] && project_root="/mnt/e/projects"
  
  mkdir -p "$project_root/$1"/{src,tests,data,configs,infra,docs}
  cd "$project_root/$1"
  
  git init
  python -m venv .venv
  echo "source .venv/bin/activate" > .envrc
  direnv allow
  
  # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã
  touch README.md .gitignore
  echo "# $1" > README.md
  
  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ VSCode –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
  if command -v code &>/dev/null; then
    code .
  else
    echo "VSCode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ $PWD"
  fi
}
ZSHRC

# === 10. –°–ö–†–ò–ü–¢ –ê–£–î–ò–¢–ê ================
echo "üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∞—É–¥–∏—Ç–∞ —Å—Ä–µ–¥—ã..."
cat << 'AUDIT' > ~/devops-audit.sh
#!/bin/bash
echo "=== ESNSEY ENVIRONMENT AUDIT ==="
echo "–î–∞—Ç–∞: $(date)"
echo "–°–∏—Å—Ç–µ–º–∞: $(uname -a)"
echo "--------------------------------"

# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
tools=(
  git terraform node npm python pip docker 
  docker-compose poetry pre-commit kind kubectl
  zsh eza
)

for tool in "${tools[@]}"; do
  echo -n "üîß $tool: "
  if command -v "$tool" &>/dev/null; then
    version=$("$tool" --version 2>&1 | head -n1)
    echo "${version//$tool/}" | xargs
  else
    echo "NOT INSTALLED"
  fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
echo -e "\nüê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker:"
docker run --rm hello-world | grep -i "Hello from Docker" && echo "Docker —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "Docker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ WSL
echo -e "\nüîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è WSL:"
wsl.exe --list --verbose
AUDIT

chmod +x ~/devops-audit.sh

# === –ó–ê–í–ï–†–®–ï–ù–ò–ï =======================
echo -e "\n‚úÖ \e[1;32m–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\e[0m"
echo "üíª –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
echo "   source ~/.zshrc"
echo "   exec zsh"
echo ""
echo "üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   new-project <name>  - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"
echo "   vpngate             - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ VPN —Å–µ—Ä–≤–µ—Ä–æ–≤"
echo "   env-audit           - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
echo "   update-system       - –æ–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
echo ""
echo "üìã –õ–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $LOG"
echo -e "\n\e[1;35mESNsey DevOps Environment –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ\e[0m"
